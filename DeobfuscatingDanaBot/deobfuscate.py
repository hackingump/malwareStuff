"""IDA Python script for deobfuscating api hashing of Danabot malware."""
import idautils
import idaapi
import idc
import re

re_expression = "(.*)---(.*)---(.*)---(.*)---(.*)"

def get_api_table(lines):
	"""Return the api table."""
	api_table = {}
	for line in lines:
		line = line.replace("\n", "")
		m = re.match(re_expression, line)
		if m is not None:
			dll = m.group(1)
			offs = m.group(2)
			funcname = m.group(3)
			ordinal = m.group(4)
			hashv = m.group(5)
			api_table[hashv] = funcname
	return api_table


def add_comment(addr, hashv, api_table):
	"""Write a comment at addr with the matching api function.Return True if a corresponding api hash was found."""
	# remove the "h" at the end of the string
	hashv = hex(int(hashv[:-1], 16))
	#print hashv
	keys = api_table.keys()
	print "Checking key %s" % (hashv,)
	#return True
	if hashv in keys:
		apifunc = api_table[hashv]
		print "Found ApiFunction = %s. Adding comment." % (apifunc,)
		idc.MakeComm(addr, apifunc)
		comment_added = True
	else:
		print "Api function for hash = %s not found" % (hashv,)
		comment_added = False
	return comment_added


def main():
	"""Main"""
	f = open("C:\\Users\\luffy\\Desktop\\Danabot\\05-07-2020\\Utils\\danabot_hash_table.txt", "r")
	lines = f.readlines()
	f.close()
	api_table = get_api_table(lines)
	i = 0
	ii = 0
	for xref in idautils.XrefsTo(0x2f2858):
		i += 1
		currentaddr = xref.frm
		addr_minus = currentaddr - 0x10
		while currentaddr >= addr_minus:
		      currentaddr = PrevHead(currentaddr)
		      # print GetDisasm(calladdr)
		      is_mov = GetMnem(currentaddr) == "mov"
		      if is_mov:
		      	dst_is_edx = GetOpnd(currentaddr, 0)
		      	if dst_is_edx:
		      		# print "[+] destination operand is edx"
		      		src = GetOpnd(currentaddr, 1)
		      		if src.endswith("h"):
		      		  print "Immediate found at %s\n Writing comment now with corresponding api function" % (hex(currentaddr),)
		      		  print src
		      		  add_comment(xref.frm, src, api_table)
		      		  ii += 1
	print "Total xrefs found %d" % (i,)
	print "Total api hash functions deobfuscated %d" % (ii,)
		
if __name__ == '__main__':
	main()